import{XtallatX}from"./node_modules/xtal-latx/xtal-latx.js";import{define}from"./node_modules/xtal-latx/define.js";const search="search",text_content="text-content",re=/(<([^>]+)>)/ig;export class XtalSplit extends XtallatX(HTMLElement){static get is(){return"xtal-split"}static get observedAttributes(){return super.observedAttributes.concat([search,text_content])}attributeChangedCallback(name,oldVal,newVal){switch(name){case search:this._s=newVal;break;case text_content:this._t=newVal?this.strip(newVal):"";break;}this.onPropsChange()}get search(){return this._s}set search(val){this.attr(search,val)}get textContent(){return this._t}set textContent(val){this.attr(text_content,val)}strip(html){return html.replace(re,"")}connectedCallback(){this._connected=!0;this._upgradeProperties(["search","textContent"]);this.onPropsChange()}onPropsChange(){if(!this._connected)return;if(!this._t)this.textContent=this.strip(this.innerText);if(!this._s){this.innerText=this._t}else{const split=this._t.split(new RegExp(this._s,"i")),tcL=this._t.length,tc=split.length,len=this._s.length;let iP=0,text="";split.forEach((t,i)=>{iP+=t.length;text+=t;if(i<tc&&iP<tcL)text+="<span class='match'>"+this._t.substr(iP,len)+"</span>";iP+=len});this.innerHTML=text}}}define(XtalSplit);