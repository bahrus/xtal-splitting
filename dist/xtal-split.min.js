import{XtallatX}from"xtal-element/xtal-latx.js";import{define}from"trans-render/define.js";import{hydrate,up}from"trans-render/hydrate.js";const search="search",text_content="text-content",re=/(<([^>]+)>)/gi;export class XtalSplit extends(XtallatX(hydrate(HTMLElement))){static get is(){return"xtal-split"}static get observedAttributes(){return super.observedAttributes.concat([search,text_content])}attributeChangedCallback(t,e,s){switch(t){case search:this._s=s;break;case text_content:this._t=this.strip(s)}this.onPropsChange()}get search(){return this._s}set search(t){this.attr(search,t)}get textContent(){return this._t}set textContent(t){this.attr(text_content,t)}strip(t){return t.replace(re,"")}connectedCallback(){this._connected=!0,this[up](["search","textContent"]),this.onPropsChange()}onPropsChange(){if(this._connected){if(void 0===this._t){if(null===this.firstChild)return;this.textContent=this.innerText}if(this._s){const t=this._t.split(new RegExp(this._s,"i")),e=this._t.length,s=t.length,n=this._s.length;let r=0,i="";t.forEach((t,h)=>{r+=t.length,i+=t,h<s&&r<e&&(i+="<span class='match'>"+this._t.substr(r,n)+"</span>"),r+=n}),this.innerHTML=i}else this.innerText=this._t}}}define(XtalSplit);